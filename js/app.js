'use strict';

//create stores / stores table / hours (this might change later to a hashtable)
var stores = [];
var storeTable = document.getElementById('stores');
var storeForm = document.getElementById('store-form');
var hours = ['6am','7am', '8am', '9am', '10am', '11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm'];

//this is our 'database' that would hold all of the data needed to create the basic objects

var storeInformation = [
  {storeLocation : '1st and Pike', minCust : 23, maxCust: 65, averageCookie : 6.3},
  {storeLocation : 'SeaTac Airport', minCust : 3, maxCust : 24, averageCookie : 1.2},
  {storeLocation : 'Seattle Center', minCust : 11, maxCust : 38, averageCookie : 3.7},
  {storeLocation : 'Capitol Hill', minCust : 20, maxCust : 38, averageCookie : 2.3},
  {storeLocation : 'Alki', minCust : 2, maxCust : 16, averageCookie : 4.6}
];

/* Below is a list of all the different sites as objects and their methods that are needed to get the information for each */

//Build contructor
function StoreConstructor(storeLocation, minCust, maxCust, averageCookie) {
  this.storeLocation = storeLocation;
  this.sales = {
    minCust : minCust,
    maxCust : maxCust,
    averageCookie : averageCookie,
    hourlyCookies : []
  };
  //generates a random number based on the stores parameters for the number of cookies for an hour
  this.simulatedCookiesPerHour = function(){
    return(Math.ceil((Math.random() * (this.sales.maxCust - this.sales.minCust) + this.sales.minCust) * this.sales.averageCookie));
  };
  //this will generate and populate the hourly cookies.  This uses random information generated by the simulated cookies per hour function which then gets piushed to the hourly cookies array!
  this.calculateCookiesPerHour = function(){
    var numOfHours = hours.length;
    for(var i = 0; i < numOfHours; i++){
      this.sales.hourlyCookies[i] = this.simulatedCookiesPerHour();
    }
  };
  this.getSumOfCookies = function(totalCookies, cookieNum) {
    return totalCookies + Math.round(cookieNum);
  };
  this.render = function(){
    // make a tr
    var trEl = document.createElement('tr');
    // create, content, append for 'storeLocation' column
    var tdEl = document.createElement('td');
    tdEl.textContent = this.storeLocation;
    trEl.appendChild(tdEl);

    //for loop for each time for cookies
    // create, content, append for "minimum Customer" column
    let cookieLength = this.sales.hourlyCookies.length;
    for(var i = 0; i < cookieLength; i++){
      tdEl = document.createElement('td');
      tdEl.textContent = this.sales.hourlyCookies[i];
      trEl.appendChild(tdEl);
    }
    // create. content, append for "total Cookies" column
    tdEl = document.createElement('td');
    tdEl.textContent = this.sales.hourlyCookies.reduce(this.getSumOfCookies,0);
    trEl.appendChild(tdEl);
    // append the tr to the table
    storeTable.appendChild(trEl);

  };
}
//create each individual store and put the information in there
storeInformation.forEach(function(singleStoreInfo){
  //create store object using constructor
  var newStore = new StoreConstructor(singleStoreInfo['storeLocation'], singleStoreInfo['minCust'], singleStoreInfo['maxCust'], singleStoreInfo['averageCookie']);
  //generate some data
  newStore.calculateCookiesPerHour();
  //add new store to list
  stores.push(newStore);
});

//This will populate the table header
function makeHeaderRow() {
  var trEl = document.createElement('tr');
  //white space for first part of table
  var thEl = document.createElement('th');
  trEl.appendChild(thEl);
  //load in table hours
  var numOfHours = hours.length;
  for(var i = 0; i < numOfHours; i++){
    thEl = document.createElement('th');
    thEl.textContent = hours[i];
    trEl.appendChild(thEl);
  }
  //load in totals for table header
  thEl = document.createElement('th');
  thEl.textContent = 'Daily Location Total';
  trEl.appendChild(thEl);
  storeTable.appendChild(trEl);
}

//this function renders store rows.
function renderStoreRows(){
  stores.forEach(function(store){
    store.render();
  });
  //append last row
  var trEL = document.createElement('tr');
  var tdEL = document.createElement('td');
  tdEL.textContent = 'Totals';
  trEL.appendChild(tdEL);
  //math for totals on last row
  var numOfHours = hours.length;
  var totalCookies = 0;
  for(var i = 0; i < numOfHours; i++){
    var totalForStoresHour = 0;
    stores.forEach(function(store){
      totalForStoresHour += store.sales.hourlyCookies[i];
    });
    //This adds an element that is for a specific hour and all of the stores
    tdEL = document.createElement('td');
    tdEL.textContent = totalForStoresHour;
    trEL.appendChild(tdEL);
    console.log(totalForStoresHour);
    totalCookies += totalForStoresHour;
  }
  //ALL OF THE COOKIES!!
  tdEL = document.createElement('td');
  tdEL.textContent = totalCookies;
  trEL.appendChild(tdEL);
  //append the row to the table
  storeTable.appendChild(trEL);
}

function renderAllData(){
  //These will call the functions we defined above too populate the table
  //This will populate the table full of information into the header
  makeHeaderRow();
  //This will populate the table full of information into the rows
  renderStoreRows();
}


//renders all of the data!
renderAllData();

//clear all table data
function clearAllData(){
  storeTable.innerHTML = '';
}


// This function is the function for the event handler for the submission of stores
function handleStoreSubmit(event) {
  console.log('log of event.target.storeLocation.value', event.target.storeLocation.value);

  event.preventDefault(); // gotta have it for this purpose. prevents page reload on a 'submit' event

  // Validation to prevent empty form fields
  if (!event.target.storeLocation.value || !event.target.minCust.value || !event.target.maxCust.value || !event.target.averageCookies.value) {
    return alert('Fields cannot be empty!');
  }
  // check if max is less than min, also make sure they are all numbers
  if(Number(event.target.minCust.value) >= Number(event.target.maxCust.value)){
    console.log(Number(event.target.minCust.value) + ' ' + Number(event.target.maxCust.value));
    return alert('Max must be greater or equal to the Min!');
  }
  //check for duplicate store name
  var duplicate = false;
  stores.forEach(function(store){
    if(store.storeLocation.toLowerCase() === event.target.storeLocation.value.toLowerCase() ){
      duplicate = true;
      return;
    }
  });
  if(duplicate){
    return alert('Duplicate store name!');
  }

  event.preventDefault(); // gotta have it for this purpose. prevents page reload on a 'submit' event

  var storeLocation = event.target.storeLocation.value;
  var minCust = event.target.minCust.value;
  var maxCust = event.target.maxCust.value;
  var averageCookies = event.target.averageCookies.value;

  //create new store object
  var newStore = new StoreConstructor(storeLocation, minCust, maxCust, averageCookies);
  //generate data for the store
  newStore.calculateCookiesPerHour();
  //add store to list
  stores.push(newStore);
  console.log(newStore);

  // This empties the form fields after the data has been grabbed
  event.target.storeLocation.value = null;
  event.target.minCust.value = null;
  event.target.maxCust.value = null;
  event.target.averageCookies.value = null;

  alert('Store has been created!');

  clearAllData();
  renderAllData();
//  allComments.unshift(newComment);
  //renderAllComments();
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++
// Event listener for comment submission form
storeForm.addEventListener('submit', handleStoreSubmit);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++

